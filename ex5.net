using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;

namespace Class
{
    public class Rectangle
    {
        private double sideA;
        private double sideB;

        public Rectangle(double a, double b)
        {
            sideA = a;
            sideB = b;
        }

        public Rectangle(double a)
        {
            sideA = a;
            sideB = 5;
        }

        public Rectangle()
        {
            sideA = 4;
            sideB = 3;
        }

        public double GetSideA() => sideA;
        public double GetSideB() => sideB;

        public double Area() => sideA * sideB;

        public double Perimeter() => 2 * (sideA + sideB);

        public bool IsSquare() => sideA == sideB;

        public void ReplaceSides()
        {
            double temp = sideA;
            sideA = sideB;
            sideB = temp;
        }
    }

    public class ArrayRectangles
    {
        private Rectangle[] rectangle_array;

        public ArrayRectangles(int n)
        {
            rectangle_array = new Rectangle[n];
        }

        public ArrayRectangles(params Rectangle[] rectangles)
        {
            rectangle_array = rectangles;
        }

        public bool AddRectangle(Rectangle rectangle)
        {
            int index = Array.IndexOf(rectangle_array, null);
            if (index != -1)
            {
                rectangle_array[index] = rectangle;
                return true;
            }
            return false;
        }

        

public int NumberMaxArea()
        {
            double maxArea = double.MinValue;
            int maxIndex = -1;

            for (int i = 0; i < rectangle_array.Length; i++)
            {
                if (rectangle_array[i] != null && rectangle_array[i].Area() > maxArea)
                {
                    maxArea = rectangle_array[i].Area();
                    maxIndex = i;
                }
            }

            return maxIndex;
        }

        public int NumberMinPerimeter()
        {
            double minPerimeter = double.MaxValue;
            int minIndex = -1;

            for (int i = 0; i < rectangle_array.Length; i++)
            {
                if (rectangle_array[i] != null && rectangle_array[i].Perimeter() < minPerimeter)
                {
                    minPerimeter = rectangle_array[i].Perimeter();
                    minIndex = i;
                }
            }

            return minIndex;
        }

        public int NumberSquare()
        {
            int count = 0;

            foreach (var rectangle in rectangle_array)
            {
                if (rectangle != null && rectangle.IsSquare())
                {
                    count++;
                }
            }

            return count;
        }
    }
}
